"7-base_geometry.py" Module Test and Documentation
==================================================
Import module
=============
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> 

Test Cases
==========
Importing class from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> a = BaseGeometry.area
	>>> iv = BaseGeometry.integer_validator
	>>> mod_docs = __import__('7-base_geometry').__doc__
	>>> class_docs = BaseGeometry.__doc__
	>>> area_docs = a.__doc__
	>>> int_docs = iv.__doc__
	>>> len(mod_docs) > 0
	True
	>>> len(class_docs) > 0
	True
	>>> len(area_docs) > 0
	True
	>>> len(int_docs) > 0
	True
	>>> bg = BaseGeometry()
	>>> type(bg) == BaseGeometry
	True
	>>> type(BaseGeometry.__dict__['area'])
	<class 'function'>
	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented
	>>> type(BaseGeometry.__dict__['integer_validator'])
	<class 'function'>
	>>> bg.integer_validator("str", [51])
	Traceback (most recent call last):
	TypeError: str must be an integer
	>>> bg.integer_validator("str", None)
	Traceback (most recent call last):
	TypeError: str must be an integer
	>>> bg.integer_validator("str", 0)
	Traceback (most recent call last):
	ValueError: str must be greater than 0
	>>> bg.integer_validator("str", -1)
	Traceback (most recent call last):
	ValueError: str must be greater than 0
	>>> bg.integer_validator("str", 8)
	>>> bg.integer_validator("str", 50)
	>>> bg.integer_validator("", 1)
	>>> bg.integer_validator(None, 1)
	>>> bg.integer_validator("str", (1, 2))
	Traceback (most recent call last):
	TypeError: str must be an integer
	>>> bg.integer_validator("str", {3, 3})
	Traceback (most recent call last):
	TypeError: str must be an integer
